version: '3'
services:
  app:
    build: .
    container_name: app-container
    ports:
      - 5000:5000
    depends_on:
      - mongo
      - mysql
      - redis
      - kafka
      - zookeeper
    env_file:
      - .env
    volumes:
      - .:/usr/src/app
    networks:
      - app-network
    command: ["python", "app.py"]

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - app-network

  mongo:
    image: mongo:latest
    container_name: mongo-container
    ports:
      - 27018:27017
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE}  # Changed to match your env variable
    networks:
      - app-network

  mysql:
    image: mysql:latest
    container_name: mysql-container
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_HOST: '%'
    ports:
      - 3307:3306
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis-container
    command: redis-server --requirepass ${REDIS_PASSWORD}  # Added password protection
    ports: 
      - 6379:6379
    volumes:
      - redis-data:/data  # Added volume for persistence
    networks:
      - app-network

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 3
    networks:
      - app-network 

  random_generator:
    container_name: random_generator
    build: ./datagen
    depends_on:
      - kafka
    restart: always
    networks:
      - app-network

volumes:
  mongo-data:
  redis-data:
  mysql-data:

networks:
  app-network:
    driver: bridge