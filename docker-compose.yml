version: '3.8'

services:
  etl:
    build:
      context: .
      dockerfile: docker/Dockerfile.etl
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_GROUP_ID=${KAFKA_GROUP_ID}
      - KAFKA_AUTO_OFFSET_RESET=${KAFKA_AUTO_OFFSET_RESET}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - MONGO_URI=mongodb://mongodb:27017/
      - MONGO_DB=${MONGO_DB}
      - MONGO_COLLECTION=${MONGO_COLLECTION}
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
      - DB_DB=${DB_DB}
      - DB_SCHEMA=${DB_SCHEMA}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_BUFFER_SIZE=${REDIS_BUFFER_SIZE}
      - BATCH_SIZE=${BATCH_SIZE}
    depends_on:
      - redis
      - mongodb
      - postgres
    networks:
      - app-network

  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
      - DB_DB=${DB_DB}
      - DB_SCHEMA=${DB_SCHEMA}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      - postgres
    networks:
      - app-network

  streamlit:
    build: 
      context: .
      dockerfile: docker/Dockerfile.streamlit
    ports:
      - "8501:8501"
    environment:
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
      - DB_DB=${DB_DB}
      - DB_SCHEMA=${DB_SCHEMA}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      - postgres
      - api
    networks:
      - app-network

  redis:
    image: redis:7
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - app-network

  mongodb:
    image: mongo:lastest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network

  postgres:
    image: postgres:17-bullseye
    environment:
      - POSTGRES_DB=${DB_DB}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d    # AÃ±adido este volumen
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - app-network

volumes:
  mongodb_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge