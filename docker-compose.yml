version: '3.10'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"


kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1


 # Redis service for storing data
redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - monitoring

  # Redis Exporter for Prometheus metrics
redis_exporter:
    image: oliver006/redis_exporter:latest
    ports:
      - "9121:9121"  # Port where metrics are exposed for Prometheus
    environment:
      - REDIS_ADDR=redis:6379  # Connects the exporter to the Redis service
    depends_on:
      - redis
    networks:
      - monitoring

mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    networks:
      - monitoring

mongodb_exporter:
    image: percona/mongodb_exporter:0.42.0
    ports:
      - "9216:9216"  # Port for Prometheus to scrape metrics
    environment:
      MONGODB_URI: "mongodb://mongodb:27017"  # Adjust URI if needed
    depends_on:
      - mongodb
    networks:
      - monitoring

postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d

app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - redis
      - mongodb
      - postgres
      - kafka
    environment:
      - REDIS_HOST=redis
      - MONGO_URI=mongodb://mongodb:27017/
      - DB_HOST=postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    env_file:
      - .env

api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DB=${DB_DB}
      - DB_SCHEMA=${DB_SCHEMA}
    env_file:
      - .env
    restart: unless-stopped

streamlit:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    ports:
      - "8501:8501"
    depends_on:
      - api
    env_file:
      - .env

prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus

volumes:
  mongodb_data:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:


networks:
  monitoring:
    driver: bridge 